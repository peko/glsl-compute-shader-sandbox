#version 460 core
layout(local_size_x = 128) in;

struct Particle {
  vec4 position;
  vec4 velocity;
  vec4 force;
  float mass;
  float type;
};

layout(std430, binding = 0) buffer layout_particles_in {
  Particle particles_in[];
};

layout(std430, binding = 1) buffer layout_particles_out {
  Particle particles_out[];
};

uniform float dt;
uniform float box_size;
uniform float damping;
uniform float K[36];
uniform float r[36];
uniform float R[36];

float rand(vec3 co){
    return fract(sin(dot(co, vec3(12.9898, 78.233, 546.4345))) * 43758.5453);
}

void main() {
  uint gidx = gl_GlobalInvocationID.x;

  vec3 position = particles_in[gidx].position.xyz;
  vec3 velocity = particles_in[gidx].velocity.xyz;
  float mass = particles_in[gidx].mass;
  int t1 = int(particles_in[gidx].type);
  
  const float G = 1e-5;
  const float EPS = 1e-4;

  // compute gravitational force
  vec3 F = vec3(0);
  vec3 offsets[1] = {
    vec3( 0.0,  0.0,  0.0) 
    // ,vec3( 1.0,  0.0,  0.0) 
    // ,vec3(-1.0,  0.0,  0.0) 
    // ,vec3( 0.0,  1.0,  0.0) 
    // ,vec3( 0.0, -1.0,  0.0)
    // ,vec3( 0.0,  0.0,  1.0)
    // ,vec3( 0.0,  0.0, -1.0)
  };
  for(int i = 0; i < particles_in.length(); ++i) {
    
    if(i==gidx) continue;
    
    for(int j=0; j<1; ++j) {
      vec3 v = particles_in[i].position.xyz - position + box_size*offsets[j]*2;
      vec3 n = normalize(v);
      float l = length(v);
      // if (l<=0.001) {
      //   F +=vec3(sin((v.x+i)*1e8),sin((v.y+i)*1e8),sin((v.z+i)*1e8))/0.0;
      // };
      

      int t2 = int(particles_in[i].type);
      // max radius
      float b = R[t1*6+t2];
      if(l>b) continue;
      
      float a = r[t1*6+t2]; 
      float c = (a+b)/2.0;
      float w = K[t1*6+t2]/(b-a)*2.0;
      
      if (l<=a) {
        
        F+= n*(l-a)*1.0;
        // F+= n*(1.0/a-1.0/l)*1.0;
      } else if (a < l && l <= c) {
        F+= n*(l-a)*w;
      } else if (c < l && l <= b) {
        F+= n*(b-l)*w;
      }


    }
  }

  // leap-frog scheme
  vec3 a = F / mass;
  // vec3 a = F;
  vec3 velocity_next = (velocity + a * dt)*damping;
  vec3 position_next = position + velocity_next * dt;
  // vec3 position_next = position + F;
  particles_out[gidx].position.xyz = mod(position_next-box_size,box_size*2)-box_size;
  particles_out[gidx].velocity.xyz = velocity_next;
  particles_out[gidx].mass = mass;
  particles_out[gidx].force.xyz = F;
}

