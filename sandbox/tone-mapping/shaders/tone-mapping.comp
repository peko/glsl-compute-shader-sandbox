#version 460 core
layout(local_size_x = 8, local_size_y = 8) in;

layout(rgba32f, binding = 0) uniform image2D textureIn;
layout(rgba32f, binding = 1) uniform image2D textureOut;

uniform float exposure;
uniform float white;

vec3 rgb2xyz(vec3 rgb) {
  return vec3(
    dot(vec3(0.4124564, 0.3575761, 0.1804375), rgb),
    dot(vec3(0.2126729, 0.7151522, 0.0721750), rgb),
    dot(vec3(0.0193339, 0.1191920, 0.9503041), rgb)
  );
}

vec3 xyz2rgb(vec3 xyz) {
  return vec3(
    dot(vec3(3.2404542, -1.5371385, -0.4985314), xyz),
    dot(vec3(-0.9692660, 1.8760108, 0.0415560), xyz),
    dot(vec3(0.0556434, -0.2040259, 1.0572252), xyz)
  );
}

vec3 rgb2Yxy(vec3 rgb) {
  vec3 xyz = rgb2xyz(rgb);
  return vec3(xyz.y, xyz.x / xyz.y, xyz.z / xyz.y);
}

vec3 Yxy2rgb(vec3 Yxy) {
  vec3 xyz = vec3(Yxy.x * Yxy.y, Yxy.x, Yxy.x * Yxy.z);
  return xyz2rgb(xyz);
}

float linear(float x) {
  return x;
}

float reinhard(float x) {
  return x / (1.0 + x);
}

float reinhard2(float x, float white) {
  return x * (1 + x / white) / (1 + x);
}

// Narkowicz 2015, "ACES Filmic Tone Mapping Curve"
float ACES(float x) {
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

// Uchimura 2017, "HDR theory and practice"
// Math: https://www.desmos.com/calculator/gslcdxvipg
// Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp
float t_uchimura(float x, float P, float a, float m, float l, float c, float b) {
    float l0 = ((P - m) * l) / a;
    float L0 = m - m / a;
    float L1 = m + (1.0 - m) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = (a * P) / (P - S1);
    float CP = -C2 / P;

    float w0 = 1.0 - smoothstep(0.0, m, x);
    float w2 = step(m + l0, x);
    float w1 = 1.0 - w0 - w2;

    float T = m * pow(x / m, c) + b;
    float S = P - (P - S1) * exp(CP * (x - S0));
    float L = m + a * (x - m);

    return T * w0 + L * w1 + S * w2;
}

float uchimura(float x) {
    const float P = 1.0;  // max display brightness
    const float a = 1.0;  // contrast
    const float m = 0.22; // linear section start
    const float l = 0.4;  // linear section length
    const float c = 1.33; // black
    const float b = 0.0;  // pedestal
    return t_uchimura(x, P, a, m, l, c, b);
}

void main() {
  ivec2 gidx = ivec2(gl_GlobalInvocationID.xy);

  vec3 rgb = imageLoad(textureIn, gidx).xyz;
  vec3 Yxy = rgb2Yxy(rgb);

  Yxy.x = uchimura(exposure * Yxy.x);
  rgb = Yxy2rgb(Yxy);

  // gamma correction
  rgb = pow(rgb, vec3(1.0 / 2.2));

  imageStore(textureOut, gidx, vec4(rgb, 1.0));
}